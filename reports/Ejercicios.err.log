Traceback (most recent call last):
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# 4. GeoPandas + Matplotlib - Para datos geoespaciales

import geopandas as gpd
import matplotlib.pyplot as plt

# Instalar y usar geodatasets como reemplazo directo
try:
    import geodatasets
    world = gpd.read_file(geodatasets.get_path("naturalearth.land"))
except ImportError:
    # Si no estÃ¡ instalado, usar URL que funciona
    world = gpd.read_file("zip+https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/cultural/ne_110m_admin_0_countries.zip")

# Crear el mapa
fig, ax = plt.subplots(figsize=(15, 10))
world.plot(ax=ax, color='lightblue', edgecolor='black')
plt.title('Mapa Mundial')
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[6], line 9[0m
[1;32m      7[0m [38;5;28;01mtry[39;00m:
[1;32m      8[0m     [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mgeodatasets[39;00m
[0;32m----> 9[0m     world [38;5;241m=[39m [43mgpd[49m[38;5;241;43m.[39;49m[43mread_file[49m[43m([49m[43mgeodatasets[49m[38;5;241;43m.[39;49m[43mget_path[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mnaturalearth.land[39;49m[38;5;124;43m"[39;49m[43m)[49m[43m)[49m
[1;32m     10[0m [38;5;28;01mexcept[39;00m [38;5;167;01mImportError[39;00m:
[1;32m     11[0m     [38;5;66;03m# Si no estÃ¡ instalado, usar URL que funciona[39;00m
[1;32m     12[0m     world [38;5;241m=[39m gpd[38;5;241m.[39mread_file([38;5;124m"[39m[38;5;124mzip+https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/cultural/ne_110m_admin_0_countries.zip[39m[38;5;124m"[39m)

File [0;32m~/miniconda3/envs/ml_venv/lib/python3.9/site-packages/geopandas/io/file.py:281[0m, in [0;36m_read_file[0;34m(filename, bbox, mask, rows, engine, **kwargs)[0m
[1;32m    278[0m     [38;5;28;01melse[39;00m:
[1;32m    279[0m         path_or_bytes [38;5;241m=[39m filename
[0;32m--> 281[0m     [38;5;28;01mreturn[39;00m [43m_read_file_fiona[49m[43m([49m
[1;32m    282[0m [43m        [49m[43mpath_or_bytes[49m[43m,[49m[43m [49m[43mfrom_bytes[49m[43m,[49m[43m [49m[43mbbox[49m[38;5;241;43m=[39;49m[43mbbox[49m[43m,[49m[43m [49m[43mmask[49m[38;5;241;43m=[39;49m[43mmask[49m[43m,[49m[43m [49m[43mrows[49m[38;5;241;43m=[39;49m[43mrows[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m
[1;32m    283[0m [43m    [49m[43m)[49m
[1;32m    285[0m [38;5;28;01melse[39;00m:
[1;32m    286[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124munknown engine [39m[38;5;124m'[39m[38;5;132;01m{[39;00mengine[38;5;132;01m}[39;00m[38;5;124m'[39m[38;5;124m"[39m)

File [0;32m~/miniconda3/envs/ml_venv/lib/python3.9/site-packages/geopandas/io/file.py:299[0m, in [0;36m_read_file_fiona[0;34m(path_or_bytes, from_bytes, bbox, mask, rows, where, **kwargs)[0m
[1;32m    293[0m     [38;5;28;01mraise[39;00m [38;5;167;01mNotImplementedError[39;00m([38;5;124m"[39m[38;5;124mwhere requires fiona 1.9+[39m[38;5;124m"[39m)
[1;32m    295[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m from_bytes:
[1;32m    296[0m     [38;5;66;03m# Opening a file via URL or file-like-object above automatically detects a[39;00m
[1;32m    297[0m     [38;5;66;03m# zipped file. In order to match that behavior, attempt to add a zip scheme[39;00m
[1;32m    298[0m     [38;5;66;03m# if missing.[39;00m
[0;32m--> 299[0m     [38;5;28;01mif[39;00m [43m_is_zip[49m[43m([49m[38;5;28;43mstr[39;49m[43m([49m[43mpath_or_bytes[49m[43m)[49m[43m)[49m:
[1;32m    300[0m         parsed [38;5;241m=[39m fiona[38;5;241m.[39mparse_path([38;5;28mstr[39m(path_or_bytes))
[1;32m    301[0m         [38;5;28;01mif[39;00m [38;5;28misinstance[39m(parsed, fiona[38;5;241m.[39mpath[38;5;241m.[39mParsedPath):
[1;32m    302[0m             [38;5;66;03m# If fiona is able to parse the path, we can safely look at the scheme[39;00m
[1;32m    303[0m             [38;5;66;03m# and update it to have a zip scheme if necessary.[39;00m

File [0;32m~/miniconda3/envs/ml_venv/lib/python3.9/site-packages/geopandas/io/file.py:166[0m, in [0;36m_is_zip[0;34m(path)[0m
[1;32m    164[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21m_is_zip[39m(path):
[1;32m    165[0m [38;5;250m    [39m[38;5;124;03m"""Check if a given path is a zipfile"""[39;00m
[0;32m--> 166[0m     parsed [38;5;241m=[39m [43mfiona[49m[38;5;241;43m.[39;49m[43mpath[49m[38;5;241m.[39mParsedPath[38;5;241m.[39mfrom_uri(path)
[1;32m    167[0m     [38;5;28;01mreturn[39;00m (
[1;32m    168[0m         parsed[38;5;241m.[39marchive[38;5;241m.[39mendswith([38;5;124m"[39m[38;5;124m.zip[39m[38;5;124m"[39m)
[1;32m    169[0m         [38;5;28;01mif[39;00m parsed[38;5;241m.[39marchive
[1;32m    170[0m         [38;5;28;01melse[39;00m parsed[38;5;241m.[39mpath[38;5;241m.[39mendswith([38;5;124m"[39m[38;5;124m.zip[39m[38;5;124m"[39m)
[1;32m    171[0m     )

[0;31mAttributeError[0m: module 'fiona' has no attribute 'path'

