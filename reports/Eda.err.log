Traceback (most recent call last):
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# ================== BIVARIADO INTERPRETABLE ==================
# Produce para cada X categÃ³rica:
# - P(y=1|k), n, Î”Riesgo vs ref, RR, p-valor ChiÂ² y V de CramÃ©r
import pandas as pd, numpy as np
from scipy.stats import chi2_contingency

COL_Y = 'y_asfixia'  # 1=asfixia, 0=otros

# 0) Dataset base
Z = (train_prep if 'train_prep' in globals() else df).copy()
Z = Z[Z[COL_Y].isin([0,1])].copy()

# 1) Variables candidatas presentes
XCAND = [
    'Sexo de la victima','Grupo de edad de la victima','Ciclo Vital','Estado Civil',
    'Escolaridad','Zona del Hecho','Escenario del Hecho','Actividad Durante el Hecho',
    'Circunstancia del Hecho','Manera de Muerte','Departamento del hecho DANE',
    'Municipio del hecho DANE','Mes del hecho'
]
X = [c for c in XCAND if c in Z.columns]
if not X:
    raise SystemExit("No hay X categÃ³ricas presentes. Ajusta XCAND a tus nombres reales.")

def cat_summary(df, x, y=COL_Y, ref=None):
    t = (df[[x,y]].dropna()
         .groupby(x, dropna=False)[y]
         .agg(n='count', p1='mean')
         .reset_index())
    if t.empty:
        return None, None
    # referencia: la categorÃ­a con mayor n si no se especifica
    if ref is None:
        ref = t.sort_values('n', ascending=False).iloc[0,0]
    p_ref = t.loc[t[x]==ref, 'p1'].values[0]
    # mÃ©tricas por nivel
    t['p1_pct'] = (100*t['p1']).round(1)
    t['Delta_riesgo'] = (t['p1'] - p_ref).round(4)
    t['RR'] = np.where(p_ref>0, (t['p1'] / p_ref).round(3), np.nan)
    t['ref'] = (t[x]==ref).map({True:'(ref)', False:''})
    # ChiÂ² + V de CramÃ©r
    tb = pd.crosstab(df[x], df[y])
    if tb.shape[0] >= 2 and tb.shape[1] == 2:
        chi2, p, _, _ = chi2_contingency(tb)
        n = tb.to_numpy().sum()
        phi2 = chi2 / n if n>0 else 0
        r, k = tb.shape
        denom = max(1, min(k-1, r-1))
        v = float(np.sqrt(phi2/denom))
    else:
        p, v = np.nan, 0.0
    t = t.sort_values('Delta_riesgo', ascending=False, key=abs)
    t = t[[x, 'n', 'p1_pct', 'Delta_riesgo', 'RR', 'ref']]
    t.columns = ['Categoria', 'n', 'P(y=1)%', 'Î”Riesgo', 'RR', 'ref']
    return t.reset_index(drop=True), {'x':x,'p':p,'V':v,'n':int(df[x].notna().sum())}

# 2) Ejecuta para todas las X y arma ranking por mayor |Î”Riesgo|
tablas = {}
resumen = []
for x in X:
    t, g = cat_summary(Z, x)
    if t is None: 
        continue
    t['Variable'] = x
    tablas[x] = t
    # mejor y peor categorÃ­a por Î”Riesgo
    top = t.iloc[0]
    resumen.append({'Variable':x, 'n_cat':len(t), 'n_obs':g['n'],
                    'V_Cramer':g['V'], 'p_chi2':g['p'],
                    'Mejor_cat': top['Categoria'], 'Î”Riesgo_max': float(top['Î”Riesgo']),
                    'P(y=1)%_mejor': float(top['P(y=1)%'])})

resumen_df = (pd.DataFrame(resumen)
              .sort_values(['Î”Riesgo_max','V_Cramer'], ascending=[False, False], key=abs)
              .reset_index(drop=True))

# 3) Mostrar: resumen de variables y tabla detallada para las 3 con mayor |Î”Riesgo|
print(f"Bivariado interpretable | n={len(Z):,} | y=1={Z[COL_Y].mean()*100:.1f}%")
print("\nRanking por |Î”Riesgo| y V de CramÃ©r:")
display(resumen_df.style.format({'V_Cramer':'{:.3f}','p_chi2':'{:.3g}','Î”Riesgo_max':'{:+.3f}',
                                 'P(y=1)%_mejor':'{:.1f}'}))

top_vars = resumen_df['Variable'].head(3).tolist()
for v in top_vars:
    print(f"\n=== {v} ===")
    display(tablas[v].style.format({'P(y=1)%':'{:.1f}','Î”Riesgo':'{:+.3f}','RR':'{:.2f}'}))

------------------

----- stderr -----
/Users/instructorzamora/miniconda3/envs/ml_venv/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3534: UserWarning:

To exit: use 'exit', 'quit', or Ctrl-D.
------------------

An exception has occurred, use %tb to see the full traceback.

[0;31mSystemExit[0m[0;31m:[0m No hay X categÃ³ricas presentes. Ajusta XCAND a tus nombres reales.


